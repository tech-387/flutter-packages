// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.videoplayer;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CreateMessage {
    private @Nullable String asset;

    public @Nullable String getAsset() {
      return asset;
    }

    public void setAsset(@Nullable String setterArg) {
      this.asset = setterArg;
    }

    private @Nullable String uri;

    public @Nullable String getUri() {
      return uri;
    }

    public void setUri(@Nullable String setterArg) {
      this.uri = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    private @Nullable String formatHint;

    public @Nullable String getFormatHint() {
      return formatHint;
    }

    public void setFormatHint(@Nullable String setterArg) {
      this.formatHint = setterArg;
    }

    private @NonNull Map<String, String> httpHeaders;

    public @NonNull Map<String, String> getHttpHeaders() {
      return httpHeaders;
    }

    public void setHttpHeaders(@NonNull Map<String, String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"httpHeaders\" is null.");
      }
      this.httpHeaders = setterArg;
    }

    private @Nullable BufferOptionsMessage bufferOptions;

    public @Nullable BufferOptionsMessage getBufferOptions() {
      return bufferOptions;
    }

    public void setBufferOptions(@Nullable BufferOptionsMessage setterArg) {
      this.bufferOptions = setterArg;
    }

    private @Nullable LoggerOptionsMessage loggerOptions;

    public @Nullable LoggerOptionsMessage getLoggerOptions() {
      return loggerOptions;
    }

    public void setLoggerOptions(@Nullable LoggerOptionsMessage setterArg) {
      this.loggerOptions = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CreateMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      CreateMessage that = (CreateMessage) o;
      return Objects.equals(asset, that.asset) && Objects.equals(uri, that.uri) && Objects.equals(packageName, that.packageName) && Objects.equals(formatHint, that.formatHint) && httpHeaders.equals(that.httpHeaders) && Objects.equals(bufferOptions, that.bufferOptions) && Objects.equals(loggerOptions, that.loggerOptions);
    }

    @Override
    public int hashCode() {
      return Objects.hash(asset, uri, packageName, formatHint, httpHeaders, bufferOptions, loggerOptions);
    }

    public static final class Builder {

      private @Nullable String asset;

      @CanIgnoreReturnValue
      public @NonNull Builder setAsset(@Nullable String setterArg) {
        this.asset = setterArg;
        return this;
      }

      private @Nullable String uri;

      @CanIgnoreReturnValue
      public @NonNull Builder setUri(@Nullable String setterArg) {
        this.uri = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable String formatHint;

      @CanIgnoreReturnValue
      public @NonNull Builder setFormatHint(@Nullable String setterArg) {
        this.formatHint = setterArg;
        return this;
      }

      private @Nullable Map<String, String> httpHeaders;

      @CanIgnoreReturnValue
      public @NonNull Builder setHttpHeaders(@NonNull Map<String, String> setterArg) {
        this.httpHeaders = setterArg;
        return this;
      }

      private @Nullable BufferOptionsMessage bufferOptions;

      @CanIgnoreReturnValue
      public @NonNull Builder setBufferOptions(@Nullable BufferOptionsMessage setterArg) {
        this.bufferOptions = setterArg;
        return this;
      }

      private @Nullable LoggerOptionsMessage loggerOptions;

      @CanIgnoreReturnValue
      public @NonNull Builder setLoggerOptions(@Nullable LoggerOptionsMessage setterArg) {
        this.loggerOptions = setterArg;
        return this;
      }

      public @NonNull CreateMessage build() {
        CreateMessage pigeonReturn = new CreateMessage();
        pigeonReturn.setAsset(asset);
        pigeonReturn.setUri(uri);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setFormatHint(formatHint);
        pigeonReturn.setHttpHeaders(httpHeaders);
        pigeonReturn.setBufferOptions(bufferOptions);
        pigeonReturn.setLoggerOptions(loggerOptions);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(7);
      toListResult.add(asset);
      toListResult.add(uri);
      toListResult.add(packageName);
      toListResult.add(formatHint);
      toListResult.add(httpHeaders);
      toListResult.add(bufferOptions);
      toListResult.add(loggerOptions);
      return toListResult;
    }

    static @NonNull CreateMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      CreateMessage pigeonResult = new CreateMessage();
      Object asset = pigeonVar_list.get(0);
      pigeonResult.setAsset((String) asset);
      Object uri = pigeonVar_list.get(1);
      pigeonResult.setUri((String) uri);
      Object packageName = pigeonVar_list.get(2);
      pigeonResult.setPackageName((String) packageName);
      Object formatHint = pigeonVar_list.get(3);
      pigeonResult.setFormatHint((String) formatHint);
      Object httpHeaders = pigeonVar_list.get(4);
      pigeonResult.setHttpHeaders((Map<String, String>) httpHeaders);
      Object bufferOptions = pigeonVar_list.get(5);
      pigeonResult.setBufferOptions((BufferOptionsMessage) bufferOptions);
      Object loggerOptions = pigeonVar_list.get(6);
      pigeonResult.setLoggerOptions((LoggerOptionsMessage) loggerOptions);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CacheOptionsMessage {
    private @NonNull Boolean enableCache;

    public @NonNull Boolean getEnableCache() {
      return enableCache;
    }

    public void setEnableCache(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enableCache\" is null.");
      }
      this.enableCache = setterArg;
    }

    private @NonNull String cacheDirectory;

    public @NonNull String getCacheDirectory() {
      return cacheDirectory;
    }

    public void setCacheDirectory(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cacheDirectory\" is null.");
      }
      this.cacheDirectory = setterArg;
    }

    private @NonNull Long maxCacheBytes;

    public @NonNull Long getMaxCacheBytes() {
      return maxCacheBytes;
    }

    public void setMaxCacheBytes(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxCacheBytes\" is null.");
      }
      this.maxCacheBytes = setterArg;
    }

    private @NonNull Long maxFileBytes;

    public @NonNull Long getMaxFileBytes() {
      return maxFileBytes;
    }

    public void setMaxFileBytes(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxFileBytes\" is null.");
      }
      this.maxFileBytes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CacheOptionsMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      CacheOptionsMessage that = (CacheOptionsMessage) o;
      return enableCache.equals(that.enableCache) && cacheDirectory.equals(that.cacheDirectory) && maxCacheBytes.equals(that.maxCacheBytes) && maxFileBytes.equals(that.maxFileBytes);
    }

    @Override
    public int hashCode() {
      return Objects.hash(enableCache, cacheDirectory, maxCacheBytes, maxFileBytes);
    }

    public static final class Builder {

      private @Nullable Boolean enableCache;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnableCache(@NonNull Boolean setterArg) {
        this.enableCache = setterArg;
        return this;
      }

      private @Nullable String cacheDirectory;

      @CanIgnoreReturnValue
      public @NonNull Builder setCacheDirectory(@NonNull String setterArg) {
        this.cacheDirectory = setterArg;
        return this;
      }

      private @Nullable Long maxCacheBytes;

      @CanIgnoreReturnValue
      public @NonNull Builder setMaxCacheBytes(@NonNull Long setterArg) {
        this.maxCacheBytes = setterArg;
        return this;
      }

      private @Nullable Long maxFileBytes;

      @CanIgnoreReturnValue
      public @NonNull Builder setMaxFileBytes(@NonNull Long setterArg) {
        this.maxFileBytes = setterArg;
        return this;
      }

      public @NonNull CacheOptionsMessage build() {
        CacheOptionsMessage pigeonReturn = new CacheOptionsMessage();
        pigeonReturn.setEnableCache(enableCache);
        pigeonReturn.setCacheDirectory(cacheDirectory);
        pigeonReturn.setMaxCacheBytes(maxCacheBytes);
        pigeonReturn.setMaxFileBytes(maxFileBytes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(enableCache);
      toListResult.add(cacheDirectory);
      toListResult.add(maxCacheBytes);
      toListResult.add(maxFileBytes);
      return toListResult;
    }

    static @NonNull CacheOptionsMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      CacheOptionsMessage pigeonResult = new CacheOptionsMessage();
      Object enableCache = pigeonVar_list.get(0);
      pigeonResult.setEnableCache((Boolean) enableCache);
      Object cacheDirectory = pigeonVar_list.get(1);
      pigeonResult.setCacheDirectory((String) cacheDirectory);
      Object maxCacheBytes = pigeonVar_list.get(2);
      pigeonResult.setMaxCacheBytes((Long) maxCacheBytes);
      Object maxFileBytes = pigeonVar_list.get(3);
      pigeonResult.setMaxFileBytes((Long) maxFileBytes);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BufferOptionsMessage {
    private @NonNull Long minBufferMs;

    public @NonNull Long getMinBufferMs() {
      return minBufferMs;
    }

    public void setMinBufferMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minBufferMs\" is null.");
      }
      this.minBufferMs = setterArg;
    }

    private @NonNull Long maxBufferMs;

    public @NonNull Long getMaxBufferMs() {
      return maxBufferMs;
    }

    public void setMaxBufferMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxBufferMs\" is null.");
      }
      this.maxBufferMs = setterArg;
    }

    private @NonNull Long bufferForPlaybackMs;

    public @NonNull Long getBufferForPlaybackMs() {
      return bufferForPlaybackMs;
    }

    public void setBufferForPlaybackMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bufferForPlaybackMs\" is null.");
      }
      this.bufferForPlaybackMs = setterArg;
    }

    private @NonNull Long bufferForPlaybackAfterRebufferMs;

    public @NonNull Long getBufferForPlaybackAfterRebufferMs() {
      return bufferForPlaybackAfterRebufferMs;
    }

    public void setBufferForPlaybackAfterRebufferMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bufferForPlaybackAfterRebufferMs\" is null.");
      }
      this.bufferForPlaybackAfterRebufferMs = setterArg;
    }

    private @NonNull Long minDurationForQualityIncreaseMs;

    public @NonNull Long getMinDurationForQualityIncreaseMs() {
      return minDurationForQualityIncreaseMs;
    }

    public void setMinDurationForQualityIncreaseMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minDurationForQualityIncreaseMs\" is null.");
      }
      this.minDurationForQualityIncreaseMs = setterArg;
    }

    private @NonNull Long maxDurationForQualityDecreaseMs;

    public @NonNull Long getMaxDurationForQualityDecreaseMs() {
      return maxDurationForQualityDecreaseMs;
    }

    public void setMaxDurationForQualityDecreaseMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxDurationForQualityDecreaseMs\" is null.");
      }
      this.maxDurationForQualityDecreaseMs = setterArg;
    }

    private @NonNull Long minDurationToRetainAfterDiscardMs;

    public @NonNull Long getMinDurationToRetainAfterDiscardMs() {
      return minDurationToRetainAfterDiscardMs;
    }

    public void setMinDurationToRetainAfterDiscardMs(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"minDurationToRetainAfterDiscardMs\" is null.");
      }
      this.minDurationToRetainAfterDiscardMs = setterArg;
    }

    private @NonNull Long maxWidthToDiscard;

    public @NonNull Long getMaxWidthToDiscard() {
      return maxWidthToDiscard;
    }

    public void setMaxWidthToDiscard(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxWidthToDiscard\" is null.");
      }
      this.maxWidthToDiscard = setterArg;
    }

    private @NonNull Long maxHeightToDiscard;

    public @NonNull Long getMaxHeightToDiscard() {
      return maxHeightToDiscard;
    }

    public void setMaxHeightToDiscard(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxHeightToDiscard\" is null.");
      }
      this.maxHeightToDiscard = setterArg;
    }

    private @NonNull Double bandwidthFraction;

    public @NonNull Double getBandwidthFraction() {
      return bandwidthFraction;
    }

    public void setBandwidthFraction(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bandwidthFraction\" is null.");
      }
      this.bandwidthFraction = setterArg;
    }

    private @NonNull Double bufferedFractionToLiveEdgeForQualityIncrease;

    public @NonNull Double getBufferedFractionToLiveEdgeForQualityIncrease() {
      return bufferedFractionToLiveEdgeForQualityIncrease;
    }

    public void setBufferedFractionToLiveEdgeForQualityIncrease(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bufferedFractionToLiveEdgeForQualityIncrease\" is null.");
      }
      this.bufferedFractionToLiveEdgeForQualityIncrease = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    BufferOptionsMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      BufferOptionsMessage that = (BufferOptionsMessage) o;
      return minBufferMs.equals(that.minBufferMs) && maxBufferMs.equals(that.maxBufferMs) && bufferForPlaybackMs.equals(that.bufferForPlaybackMs) && bufferForPlaybackAfterRebufferMs.equals(that.bufferForPlaybackAfterRebufferMs) && minDurationForQualityIncreaseMs.equals(that.minDurationForQualityIncreaseMs) && maxDurationForQualityDecreaseMs.equals(that.maxDurationForQualityDecreaseMs) && minDurationToRetainAfterDiscardMs.equals(that.minDurationToRetainAfterDiscardMs) && maxWidthToDiscard.equals(that.maxWidthToDiscard) && maxHeightToDiscard.equals(that.maxHeightToDiscard) && bandwidthFraction.equals(that.bandwidthFraction) && bufferedFractionToLiveEdgeForQualityIncrease.equals(that.bufferedFractionToLiveEdgeForQualityIncrease);
    }

    @Override
    public int hashCode() {
      return Objects.hash(minBufferMs, maxBufferMs, bufferForPlaybackMs, bufferForPlaybackAfterRebufferMs, minDurationForQualityIncreaseMs, maxDurationForQualityDecreaseMs, minDurationToRetainAfterDiscardMs, maxWidthToDiscard, maxHeightToDiscard, bandwidthFraction, bufferedFractionToLiveEdgeForQualityIncrease);
    }

    public static final class Builder {

      private @Nullable Long minBufferMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setMinBufferMs(@NonNull Long setterArg) {
        this.minBufferMs = setterArg;
        return this;
      }

      private @Nullable Long maxBufferMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setMaxBufferMs(@NonNull Long setterArg) {
        this.maxBufferMs = setterArg;
        return this;
      }

      private @Nullable Long bufferForPlaybackMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setBufferForPlaybackMs(@NonNull Long setterArg) {
        this.bufferForPlaybackMs = setterArg;
        return this;
      }

      private @Nullable Long bufferForPlaybackAfterRebufferMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setBufferForPlaybackAfterRebufferMs(@NonNull Long setterArg) {
        this.bufferForPlaybackAfterRebufferMs = setterArg;
        return this;
      }

      private @Nullable Long minDurationForQualityIncreaseMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setMinDurationForQualityIncreaseMs(@NonNull Long setterArg) {
        this.minDurationForQualityIncreaseMs = setterArg;
        return this;
      }

      private @Nullable Long maxDurationForQualityDecreaseMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setMaxDurationForQualityDecreaseMs(@NonNull Long setterArg) {
        this.maxDurationForQualityDecreaseMs = setterArg;
        return this;
      }

      private @Nullable Long minDurationToRetainAfterDiscardMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setMinDurationToRetainAfterDiscardMs(@NonNull Long setterArg) {
        this.minDurationToRetainAfterDiscardMs = setterArg;
        return this;
      }

      private @Nullable Long maxWidthToDiscard;

      @CanIgnoreReturnValue
      public @NonNull Builder setMaxWidthToDiscard(@NonNull Long setterArg) {
        this.maxWidthToDiscard = setterArg;
        return this;
      }

      private @Nullable Long maxHeightToDiscard;

      @CanIgnoreReturnValue
      public @NonNull Builder setMaxHeightToDiscard(@NonNull Long setterArg) {
        this.maxHeightToDiscard = setterArg;
        return this;
      }

      private @Nullable Double bandwidthFraction;

      @CanIgnoreReturnValue
      public @NonNull Builder setBandwidthFraction(@NonNull Double setterArg) {
        this.bandwidthFraction = setterArg;
        return this;
      }

      private @Nullable Double bufferedFractionToLiveEdgeForQualityIncrease;

      @CanIgnoreReturnValue
      public @NonNull Builder setBufferedFractionToLiveEdgeForQualityIncrease(@NonNull Double setterArg) {
        this.bufferedFractionToLiveEdgeForQualityIncrease = setterArg;
        return this;
      }

      public @NonNull BufferOptionsMessage build() {
        BufferOptionsMessage pigeonReturn = new BufferOptionsMessage();
        pigeonReturn.setMinBufferMs(minBufferMs);
        pigeonReturn.setMaxBufferMs(maxBufferMs);
        pigeonReturn.setBufferForPlaybackMs(bufferForPlaybackMs);
        pigeonReturn.setBufferForPlaybackAfterRebufferMs(bufferForPlaybackAfterRebufferMs);
        pigeonReturn.setMinDurationForQualityIncreaseMs(minDurationForQualityIncreaseMs);
        pigeonReturn.setMaxDurationForQualityDecreaseMs(maxDurationForQualityDecreaseMs);
        pigeonReturn.setMinDurationToRetainAfterDiscardMs(minDurationToRetainAfterDiscardMs);
        pigeonReturn.setMaxWidthToDiscard(maxWidthToDiscard);
        pigeonReturn.setMaxHeightToDiscard(maxHeightToDiscard);
        pigeonReturn.setBandwidthFraction(bandwidthFraction);
        pigeonReturn.setBufferedFractionToLiveEdgeForQualityIncrease(bufferedFractionToLiveEdgeForQualityIncrease);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(11);
      toListResult.add(minBufferMs);
      toListResult.add(maxBufferMs);
      toListResult.add(bufferForPlaybackMs);
      toListResult.add(bufferForPlaybackAfterRebufferMs);
      toListResult.add(minDurationForQualityIncreaseMs);
      toListResult.add(maxDurationForQualityDecreaseMs);
      toListResult.add(minDurationToRetainAfterDiscardMs);
      toListResult.add(maxWidthToDiscard);
      toListResult.add(maxHeightToDiscard);
      toListResult.add(bandwidthFraction);
      toListResult.add(bufferedFractionToLiveEdgeForQualityIncrease);
      return toListResult;
    }

    static @NonNull BufferOptionsMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      BufferOptionsMessage pigeonResult = new BufferOptionsMessage();
      Object minBufferMs = pigeonVar_list.get(0);
      pigeonResult.setMinBufferMs((Long) minBufferMs);
      Object maxBufferMs = pigeonVar_list.get(1);
      pigeonResult.setMaxBufferMs((Long) maxBufferMs);
      Object bufferForPlaybackMs = pigeonVar_list.get(2);
      pigeonResult.setBufferForPlaybackMs((Long) bufferForPlaybackMs);
      Object bufferForPlaybackAfterRebufferMs = pigeonVar_list.get(3);
      pigeonResult.setBufferForPlaybackAfterRebufferMs((Long) bufferForPlaybackAfterRebufferMs);
      Object minDurationForQualityIncreaseMs = pigeonVar_list.get(4);
      pigeonResult.setMinDurationForQualityIncreaseMs((Long) minDurationForQualityIncreaseMs);
      Object maxDurationForQualityDecreaseMs = pigeonVar_list.get(5);
      pigeonResult.setMaxDurationForQualityDecreaseMs((Long) maxDurationForQualityDecreaseMs);
      Object minDurationToRetainAfterDiscardMs = pigeonVar_list.get(6);
      pigeonResult.setMinDurationToRetainAfterDiscardMs((Long) minDurationToRetainAfterDiscardMs);
      Object maxWidthToDiscard = pigeonVar_list.get(7);
      pigeonResult.setMaxWidthToDiscard((Long) maxWidthToDiscard);
      Object maxHeightToDiscard = pigeonVar_list.get(8);
      pigeonResult.setMaxHeightToDiscard((Long) maxHeightToDiscard);
      Object bandwidthFraction = pigeonVar_list.get(9);
      pigeonResult.setBandwidthFraction((Double) bandwidthFraction);
      Object bufferedFractionToLiveEdgeForQualityIncrease = pigeonVar_list.get(10);
      pigeonResult.setBufferedFractionToLiveEdgeForQualityIncrease((Double) bufferedFractionToLiveEdgeForQualityIncrease);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LoggerOptionsMessage {
    private @NonNull Boolean enableTransferListenerLogs;

    public @NonNull Boolean getEnableTransferListenerLogs() {
      return enableTransferListenerLogs;
    }

    public void setEnableTransferListenerLogs(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enableTransferListenerLogs\" is null.");
      }
      this.enableTransferListenerLogs = setterArg;
    }

    private @NonNull Boolean enableBandwidthListenerLogs;

    public @NonNull Boolean getEnableBandwidthListenerLogs() {
      return enableBandwidthListenerLogs;
    }

    public void setEnableBandwidthListenerLogs(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enableBandwidthListenerLogs\" is null.");
      }
      this.enableBandwidthListenerLogs = setterArg;
    }

    private @NonNull Boolean enableAdaptiveTrackSelectionLogs;

    public @NonNull Boolean getEnableAdaptiveTrackSelectionLogs() {
      return enableAdaptiveTrackSelectionLogs;
    }

    public void setEnableAdaptiveTrackSelectionLogs(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enableAdaptiveTrackSelectionLogs\" is null.");
      }
      this.enableAdaptiveTrackSelectionLogs = setterArg;
    }

    private @NonNull Boolean enableCacheDataSourceLogs;

    public @NonNull Boolean getEnableCacheDataSourceLogs() {
      return enableCacheDataSourceLogs;
    }

    public void setEnableCacheDataSourceLogs(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enableCacheDataSourceLogs\" is null.");
      }
      this.enableCacheDataSourceLogs = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    LoggerOptionsMessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      LoggerOptionsMessage that = (LoggerOptionsMessage) o;
      return enableTransferListenerLogs.equals(that.enableTransferListenerLogs) && enableBandwidthListenerLogs.equals(that.enableBandwidthListenerLogs) && enableAdaptiveTrackSelectionLogs.equals(that.enableAdaptiveTrackSelectionLogs) && enableCacheDataSourceLogs.equals(that.enableCacheDataSourceLogs);
    }

    @Override
    public int hashCode() {
      return Objects.hash(enableTransferListenerLogs, enableBandwidthListenerLogs, enableAdaptiveTrackSelectionLogs, enableCacheDataSourceLogs);
    }

    public static final class Builder {

      private @Nullable Boolean enableTransferListenerLogs;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnableTransferListenerLogs(@NonNull Boolean setterArg) {
        this.enableTransferListenerLogs = setterArg;
        return this;
      }

      private @Nullable Boolean enableBandwidthListenerLogs;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnableBandwidthListenerLogs(@NonNull Boolean setterArg) {
        this.enableBandwidthListenerLogs = setterArg;
        return this;
      }

      private @Nullable Boolean enableAdaptiveTrackSelectionLogs;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnableAdaptiveTrackSelectionLogs(@NonNull Boolean setterArg) {
        this.enableAdaptiveTrackSelectionLogs = setterArg;
        return this;
      }

      private @Nullable Boolean enableCacheDataSourceLogs;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnableCacheDataSourceLogs(@NonNull Boolean setterArg) {
        this.enableCacheDataSourceLogs = setterArg;
        return this;
      }

      public @NonNull LoggerOptionsMessage build() {
        LoggerOptionsMessage pigeonReturn = new LoggerOptionsMessage();
        pigeonReturn.setEnableTransferListenerLogs(enableTransferListenerLogs);
        pigeonReturn.setEnableBandwidthListenerLogs(enableBandwidthListenerLogs);
        pigeonReturn.setEnableAdaptiveTrackSelectionLogs(enableAdaptiveTrackSelectionLogs);
        pigeonReturn.setEnableCacheDataSourceLogs(enableCacheDataSourceLogs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(enableTransferListenerLogs);
      toListResult.add(enableBandwidthListenerLogs);
      toListResult.add(enableAdaptiveTrackSelectionLogs);
      toListResult.add(enableCacheDataSourceLogs);
      return toListResult;
    }

    static @NonNull LoggerOptionsMessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      LoggerOptionsMessage pigeonResult = new LoggerOptionsMessage();
      Object enableTransferListenerLogs = pigeonVar_list.get(0);
      pigeonResult.setEnableTransferListenerLogs((Boolean) enableTransferListenerLogs);
      Object enableBandwidthListenerLogs = pigeonVar_list.get(1);
      pigeonResult.setEnableBandwidthListenerLogs((Boolean) enableBandwidthListenerLogs);
      Object enableAdaptiveTrackSelectionLogs = pigeonVar_list.get(2);
      pigeonResult.setEnableAdaptiveTrackSelectionLogs((Boolean) enableAdaptiveTrackSelectionLogs);
      Object enableCacheDataSourceLogs = pigeonVar_list.get(3);
      pigeonResult.setEnableCacheDataSourceLogs((Boolean) enableCacheDataSourceLogs);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return CreateMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return CacheOptionsMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return BufferOptionsMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return LoggerOptionsMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CreateMessage) {
        stream.write(129);
        writeValue(stream, ((CreateMessage) value).toList());
      } else if (value instanceof CacheOptionsMessage) {
        stream.write(130);
        writeValue(stream, ((CacheOptionsMessage) value).toList());
      } else if (value instanceof BufferOptionsMessage) {
        stream.write(131);
        writeValue(stream, ((BufferOptionsMessage) value).toList());
      } else if (value instanceof LoggerOptionsMessage) {
        stream.write(132);
        writeValue(stream, ((LoggerOptionsMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AndroidVideoPlayerApi {

    void initialize();

    @NonNull 
    Long create(@NonNull CreateMessage msg);

    void dispose(@NonNull Long textureId);

    void setLooping(@NonNull Long textureId, @NonNull Boolean looping);

    void setVolume(@NonNull Long textureId, @NonNull Double volume);

    void setPlaybackSpeed(@NonNull Long textureId, @NonNull Double speed);

    void play(@NonNull Long textureId);

    @NonNull 
    Long position(@NonNull Long textureId);

    void seekTo(@NonNull Long textureId, @NonNull Long position);

    void pause(@NonNull Long textureId);

    void setMixWithOthers(@NonNull Boolean mixWithOthers);

    void setCacheOptions(@NonNull CacheOptionsMessage msg);

    /** The codec used by AndroidVideoPlayerApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `AndroidVideoPlayerApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable AndroidVideoPlayerApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable AndroidVideoPlayerApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.initialize" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.initialize();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.create" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CreateMessage msgArg = (CreateMessage) args.get(0);
                try {
                  Long output = api.create(msgArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.dispose" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                try {
                  api.dispose(textureIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.setLooping" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                Boolean loopingArg = (Boolean) args.get(1);
                try {
                  api.setLooping(textureIdArg, loopingArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.setVolume" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                Double volumeArg = (Double) args.get(1);
                try {
                  api.setVolume(textureIdArg, volumeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.setPlaybackSpeed" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                Double speedArg = (Double) args.get(1);
                try {
                  api.setPlaybackSpeed(textureIdArg, speedArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.play" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                try {
                  api.play(textureIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.position" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                try {
                  Long output = api.position(textureIdArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.seekTo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                Long positionArg = (Long) args.get(1);
                try {
                  api.seekTo(textureIdArg, positionArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.pause" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                try {
                  api.pause(textureIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.setMixWithOthers" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean mixWithOthersArg = (Boolean) args.get(0);
                try {
                  api.setMixWithOthers(mixWithOthersArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.video_player_android.AndroidVideoPlayerApi.setCacheOptions" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                CacheOptionsMessage msgArg = (CacheOptionsMessage) args.get(0);
                try {
                  api.setCacheOptions(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
